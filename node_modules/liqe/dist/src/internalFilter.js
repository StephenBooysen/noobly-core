"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.internalFilter = void 0;
var createStringTest_1 = require("./createStringTest");
var isOptionalChainingSupported_1 = require("./isOptionalChainingSupported");
var testComparisonRange_1 = require("./testComparisonRange");
var testRange_1 = require("./testRange");
var optionalChainingIsSupported = (0, isOptionalChainingSupported_1.isOptionalChainingSupported)();
var createValueTest = function (ast) {
    if (ast.type !== 'Tag') {
        throw new Error('Expected a tag expression.');
    }
    var expression = ast.expression;
    if (expression.type === 'RangeExpression') {
        return function (value) {
            return (0, testRange_1.testRange)(value, expression.range);
        };
    }
    if (expression.type === 'EmptyExpression') {
        return function () {
            return false;
        };
    }
    var expressionValue = expression.value;
    if (ast.operator && ast.operator.operator !== ':') {
        var operator_1 = ast.operator;
        if (typeof expressionValue !== 'number') {
            throw new TypeError('Expected a number.');
        }
        return function (value) {
            if (typeof value !== 'number') {
                return false;
            }
            return (0, testComparisonRange_1.testComparisonRange)(expressionValue, value, operator_1.operator);
        };
    }
    else if (typeof expressionValue === 'boolean') {
        return function (value) {
            return value === expressionValue;
        };
    }
    else if (expressionValue === null) {
        return function (value) {
            return value === null;
        };
    }
    else {
        var testString_1 = (0, createStringTest_1.createStringTest)({}, ast);
        return function (value) {
            return testString_1(String(value));
        };
    }
};
var testValue = function (ast, value, resultFast, path, highlights) {
    if (Array.isArray(value)) {
        var foundMatch = false;
        var index = 0;
        for (var _i = 0, value_1 = value; _i < value_1.length; _i++) {
            var item = value_1[_i];
            if (testValue(ast, item, resultFast, __spreadArray(__spreadArray([], path, true), [String(index++)], false), highlights)) {
                if (resultFast) {
                    return true;
                }
                foundMatch = true;
            }
        }
        return foundMatch;
    }
    else if (typeof value === 'object' && value !== null) {
        var foundMatch = false;
        for (var key in value) {
            if (testValue(ast, value[key], resultFast, __spreadArray(__spreadArray([], path, true), [key], false), highlights)) {
                if (resultFast) {
                    return true;
                }
                foundMatch = true;
            }
        }
        return foundMatch;
    }
    if (ast.type !== 'Tag') {
        throw new Error('Expected a tag expression.');
    }
    if (!ast.test) {
        throw new Error('Expected test to be defined.');
    }
    var result = ast.test(value);
    if (result) {
        highlights.push(__assign(__assign({}, typeof result === 'string' && { keyword: result }), { path: path.join('.') }));
        return true;
    }
    return Boolean(result);
};
var testField = function (row, ast, resultFast, path, highlights) {
    if (ast.type !== 'Tag') {
        throw new Error('Expected a tag expression.');
    }
    if (!ast.test) {
        ast.test = createValueTest(ast);
    }
    if (ast.field.type === 'ImplicitField') {
        var foundMatch = false;
        for (var fieldName in row) {
            if (testValue(__assign(__assign({}, ast), { field: {
                    location: {
                        end: -1,
                        start: -1,
                    },
                    name: fieldName,
                    quoted: true,
                    quotes: 'double',
                    type: 'Field',
                } }), row[fieldName], resultFast, __spreadArray(__spreadArray([], path, true), [
                fieldName,
            ], false), highlights)) {
                if (resultFast) {
                    return true;
                }
                foundMatch = true;
            }
        }
        return foundMatch;
    }
    if (ast.field.name in row) {
        return testValue(ast, row[ast.field.name], resultFast, path, highlights);
    }
    else if (optionalChainingIsSupported && ast.getValue && ast.field.path) {
        return testValue(ast, ast.getValue(row), resultFast, ast.field.path, highlights);
    }
    else if (ast.field.path) {
        var value = row;
        for (var _i = 0, _a = ast.field.path; _i < _a.length; _i++) {
            var key = _a[_i];
            if (typeof value !== 'object' || value === null) {
                return false;
            }
            else if (key in value) {
                value = value[key];
            }
            else {
                return false;
            }
        }
        return testValue(ast, value, resultFast, ast.field.path, highlights);
    }
    else {
        return false;
    }
};
var internalFilter = function (ast, rows, resultFast, path, highlights) {
    if (resultFast === void 0) { resultFast = true; }
    if (path === void 0) { path = []; }
    if (highlights === void 0) { highlights = []; }
    if (ast.type === 'Tag') {
        return rows.filter(function (row) {
            return testField(row, ast, resultFast, ast.field.type === 'ImplicitField' ? path : __spreadArray(__spreadArray([], path, true), [ast.field.name], false), highlights);
        });
    }
    if (ast.type === 'UnaryOperator') {
        var removeRows_1 = (0, exports.internalFilter)(ast.operand, rows, resultFast, path, []);
        return rows.filter(function (row) {
            return !removeRows_1.includes(row);
        });
    }
    if (!ast.left) {
        throw new Error('Expected left to be defined.');
    }
    var leftRows = (0, exports.internalFilter)(ast.left, rows, resultFast, path, highlights);
    if (!ast.right) {
        throw new Error('Expected right to be defined.');
    }
    if (ast.type !== 'LogicalExpression') {
        throw new Error('Expected a tag expression.');
    }
    if (ast.operator.operator === 'OR') {
        var rightRows = (0, exports.internalFilter)(ast.right, rows, resultFast, path, highlights);
        return Array.from(new Set(__spreadArray(__spreadArray([], leftRows, true), rightRows, true)));
    }
    else if (ast.operator.operator === 'AND') {
        return (0, exports.internalFilter)(ast.right, leftRows, resultFast, path, highlights);
    }
    throw new Error('Unexpected state.');
};
exports.internalFilter = internalFilter;
