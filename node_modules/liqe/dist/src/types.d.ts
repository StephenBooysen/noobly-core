export declare type Range = {
    max: number;
    maxInclusive: boolean;
    min: number;
    minInclusive: boolean;
};
export declare type ComparisonOperator = ':' | ':<' | ':<=' | ':=' | ':>' | ':>=';
export declare type ComparisonOperatorToken = {
    location: TokenLocation;
    operator: ComparisonOperator;
    type: 'ComparisonOperator';
};
export declare type ImplicitFieldToken = {
    type: 'ImplicitField';
};
export declare type FieldToken = {
    location: TokenLocation;
    name: string;
    path?: readonly string[];
    type: 'Field';
} & ({
    quoted: false;
} | {
    quoted: true;
    quotes: 'double' | 'single';
});
export declare type RegexExpressionToken = {
    location: TokenLocation;
    type: 'RegexExpression';
    value: string;
};
export declare type RangeExpressionToken = {
    location: TokenLocation;
    range: Range;
    type: 'RangeExpression';
};
export declare type LiteralExpressionToken = {
    location: TokenLocation;
    type: 'LiteralExpression';
} & ({
    quoted: false;
    value: boolean | string | null;
} | {
    quoted: true;
    quotes: 'double' | 'single';
    value: string;
});
export declare type EmptyExpression = {
    location: TokenLocation;
    type: 'EmptyExpression';
};
export declare type ExpressionToken = EmptyExpression | LiteralExpressionToken | RangeExpressionToken | RegexExpressionToken;
export declare type BooleanOperatorToken = {
    location: TokenLocation;
    operator: 'AND' | 'OR';
    type: 'BooleanOperator';
};
export declare type ImplicitBooleanOperatorToken = {
    operator: 'AND';
    type: 'ImplicitBooleanOperator';
};
export declare type TokenLocation = {
    end: number;
    start: number;
};
export declare type TagToken = {
    expression: ExpressionToken;
    field: FieldToken | ImplicitFieldToken;
    location: TokenLocation;
    operator: ComparisonOperatorToken;
    test?: InternalTest;
    type: 'Tag';
};
export declare type LogicalExpressionToken = {
    left: ParserAst;
    location: TokenLocation;
    operator: BooleanOperatorToken | ImplicitBooleanOperatorToken;
    right: ParserAst;
    type: 'LogicalExpression';
};
export declare type UnaryOperatorToken = {
    location: TokenLocation;
    operand: ParserAst;
    operator: '-' | 'NOT';
    type: 'UnaryOperator';
};
export declare type ParenthesizedExpressionToken = {
    expression: ParserAst;
    location: TokenLocation;
    type: 'ParenthesizedExpression';
};
export declare type ParserAst = EmptyExpression | LogicalExpressionToken | ParenthesizedExpressionToken | TagToken | UnaryOperatorToken;
export declare type LiqeQuery = ParserAst & {
    getValue?: (subject: unknown) => unknown;
    left?: LiqeQuery;
    operand?: LiqeQuery;
    right?: LiqeQuery;
};
export declare type InternalHighlight = {
    keyword?: string;
    path: string;
};
export declare type Highlight = {
    path: string;
    query?: RegExp;
};
export declare type InternalTest = (value: unknown) => boolean | string;
