"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parse = void 0;
var nearley_1 = __importDefault(require("nearley"));
var errors_1 = require("./errors");
var grammar_1 = __importDefault(require("./grammar"));
var hydrateAst_1 = require("./hydrateAst");
var rules = nearley_1.default.Grammar.fromCompiled(grammar_1.default);
var MESSAGE_RULE = /Syntax error at line (?<line>\d+) col (?<column>\d+)/;
var parse = function (query) {
    if (query.trim() === '') {
        return {
            location: {
                end: 0,
                start: 0,
            },
            type: 'EmptyExpression',
        };
    }
    var parser = new nearley_1.default.Parser(rules);
    var results;
    try {
        results = parser.feed(query).results;
    }
    catch (error) {
        if (typeof (error === null || error === void 0 ? void 0 : error.message) === 'string' && typeof (error === null || error === void 0 ? void 0 : error.offset) === 'number') {
            var match = error.message.match(MESSAGE_RULE);
            if (!match) {
                throw error;
            }
            throw new errors_1.SyntaxError("Syntax error at line ".concat(match.groups.line, " column ").concat(match.groups.column), error.offset, Number(match.groups.line), Number(match.groups.column));
        }
        throw error;
    }
    if (results.length === 0) {
        throw new Error('Found no parsings.');
    }
    if (results.length > 1) {
        throw new Error('Ambiguous results.');
    }
    var hydratedAst = (0, hydrateAst_1.hydrateAst)(results[0]);
    return hydratedAst;
};
exports.parse = parse;
