"use strict";
/* eslint-disable @typescript-eslint/no-implied-eval */
/* eslint-disable no-new-func */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.hydrateAst = void 0;
var createGetValueFunctionBody_1 = require("./createGetValueFunctionBody");
var isOptionalChainingSupported_1 = require("./isOptionalChainingSupported");
var isSafePath_1 = require("./isSafePath");
var optionalChainingIsSupported = (0, isOptionalChainingSupported_1.isOptionalChainingSupported)();
var hydrateAst = function (subject) {
    var newSubject = __assign({}, subject);
    if (optionalChainingIsSupported &&
        subject.type === 'Tag' &&
        subject.field.type === 'Field' &&
        'field' in subject &&
        (0, isSafePath_1.isSafePath)(subject.field.name)) {
        newSubject.getValue = new Function('subject', (0, createGetValueFunctionBody_1.createGetValueFunctionBody)(subject.field.name));
    }
    if ('left' in subject) {
        newSubject.left = (0, exports.hydrateAst)(subject.left);
    }
    if ('right' in subject) {
        newSubject.right = (0, exports.hydrateAst)(subject.right);
    }
    if ('operand' in subject) {
        newSubject.operand = (0, exports.hydrateAst)(subject.operand);
    }
    return newSubject;
};
exports.hydrateAst = hydrateAst;
