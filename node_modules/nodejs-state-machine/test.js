"use strict";
const StateMachine = require('./index');
const { StateMachineError, errorCodes } = require('./errors');
const radio = new StateMachine('off', {
    transitions: [
        { name: "play song", from: "on", to: "playing" },
        { name: "turnOff", from: ["playing", "on", "paused"], to: "off" },
        { name: "turnOn", from: "off", to: "on" },
        { name: "pause", from: "playing", to: "paused" }
    ],
    handlers: {
        onPlaySong: (param) => {
            console.log('playing song');
        },
        onTurnOff: () => {
            console.log('turned off');
            return true;
        },
        onTurnOn: async (task) => {
            console.log('turned on');
            return task;
        },
        onPause: () => {
            console.log('paused')
        }
    },
    data: {
        songs: ["a", "b", "c"]
    }
});

async function testProgram() {
    try {
        await radio.playSong(); // notice how library automatically camel cases transition names for methods
    } catch (err) {
        //will throw error invalid transition cannot play song when radio is in stopped initial state
        console.log(err);
    }
    try {
        console.log(radio.can('playSong')); //false
        console.log(radio.availableTransitions());
        console.log(radio.can('turnOn')); //true
        console.log(await radio.turnOn('tudor')); // returns target state, "on"
        console.log(radio.availableTransitions());
        console.log(radio.is('on')); //check if radio is in on state, returns true
        console.log(await radio.turnOff()); // returns target state, "off"
        console.log(radio.reset('playing')); // helper method if one wants to reuse same state machine object, although not really recommended
        console.log(await radio.turnOn()); // will throw exception

    } catch (err) {
        //catch turn on error
        if (err instanceof StateMachineError) {
            //you can also distinguish for StateMachineError if you only have a single error handler
            //State Machine Error contains an errorCode in addition to the core Error message and stack peroperties
            //Error codes can be accessed via errors module using errors.errorCodes 
            console.log(err);
        }
    }
}

testProgram().then(() => {
}).catch(err => {
    console.log(err);
})
